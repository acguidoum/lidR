% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lasground_csf.r
\name{lasground_csf}
\alias{lasground_csf}
\title{Classify points as ground based on Cloth Simulation}
\usage{
lasground_csf(las, sloop_smooth = FALSE, class_threshold = 0.5,
  cloth_resolution = 0.5, rigidness = 1L, iterations = 500L,
  time_step = 0.65, last_returns = TRUE)
}
\arguments{
\item{las}{An object of class \link[lidR:LAS-class]{LAS} or \link[lidR:LAScatalog-class]{LAScatalog}.}

\item{sloop_smooth}{logical. When sharp slopes exist, set this parameter to TRUE to perform a
post-processing which will reduced errors.}

\item{class_threshold}{scalar. The distance to the simulated cloth to classify point cloud into ground
and non-ground. The default is 0.5.}

\item{cloth_resolution}{scalar. The distance between paticles in cloth. This is usually set to the
average distance of the points in the point cloud. The default value is 0.5.}

\item{rigidness}{integer. The rididness of the cloth. 1 stands for very soft cloth (to fit rugged
terrain), 2 stands for medium cloth and 3 stands for hard cloth (for flat terrain). The default is 1.}

\item{iterations}{integer. Maximum iteration for simulating cloth. The default value is 500. Usually,
users do not need to change this.}

\item{time_step}{scalar. Time step when simulating the cloth under the gravity. The default value
is 0.65. Usually, do not change this value. It is suitable for most cases.}

\item{last_returns}{logical. The algorithm will use only the last returns (including the first returns
in the cases of single return) to run the algorithm. If FALSE all the returns are used. If the fields
\code{'ReturnNumber'} or \code{'NumberOfReturns'} are not specified \code{'last_returns'} is turned
to \code{FALSE} automatically.}
}
\value{
If the input is a \code{LAS} object, returns nothing. The original LAS object is updated by
reference. The 'Classification' column have a value of 2 that denotes 'ground' according to LAS
specifications. If the input is a \code{LAScatalog} returns a \code{LAScatalog}.
}
\description{
Implements algorithms for segmentation of ground points. The function updates the field
\code{Classification} of the LAS input object. The points classified as 'ground' are
assigned a value of 2 according to las specifications (See the ASPRS documentation for the
\href{http://www.asprs.org/a/society/committees/standards/LAS_1_4_r13.pdf}{LAS file format}).
This method is the a strict implementation of the CSF algorithm made by Zhang et al. (2016) (see
references) that relies on the orginal source code written by the original author and exposed to
R via the the \code{RCSF} package.
}
\section{Working with a \code{LAScatalog}}{

In \code{lidR} when the input of a function is a \link[lidR:LAScatalog-class]{LAScatalog} the
functions uses the internal catalog processing engine. The user can modify the engine options using
the \link[lidR:catalog_options_tools]{available options}. A careful read of the engine
\link[lidR:LAScatalog-class]{engine documentation} is recommended to process \code{LAScatalogs}. Each
function should come with a section that doucment the avaible engine options.\cr\cr
\code{LAScatalog} engine supports \code{.lax} files that \strong{significantly} improve the computation
speed of spatial queries using a spatial index. Users should really take advange a \code{.lax} files
but this is not mandatory.
}

\section{Supported processing options}{

Supported processing options for a \code{LAScatalog} (in bold). For more details see the
\link[lidR:LAScatalog-class]{LAScatalog engine documentation}:
\itemize{
\item \strong{tiling_size}: How many data are loaded at once.
\item \strong{buffer*}: Mandatory to get a continuous output without edge effect. The buffer is
always removed once processed and will never be returned neither in R nor in files.
\item \strong{alignment}: Align the processed clusters
\item \strong{cores}: How many cores are used.
\item \strong{progress}: Displays a progression estimation.
\item \strong{stop_early}: Leave it as it unless you are an advanced user.
\item \strong{output_files*}: Mandatory because the output is likely to be too big to be returned
 in R and needs to be written in las/laz files. Supported templates are \code{XLEFT}, \code{XRIGHT},
\code{YBOTTOM}, \code{YTOP}, \code{XCENTER}, \code{YCENTER} \code{ID} and, if tiling size equal to 0
(processing by file), \code{ORIGINALFILENAME}.
\item \strong{laz_compression}: write \code{las} or \code{laz} files
\item \strong{drivers}: Leave it as it unless you are an advanced user.
\item select: The function will write file equivalent to the original ones. Thus \code{select = "*"}
and cannot be changed.
\item \strong{filter}: Read only points of interest.
}
}

\examples{
LASfile <- system.file("extdata", "Topography.laz", package="lidR")
las = readLAS(LASfile, select = "xyzrn")

lasground(las, "csf")

plot(las, color = "Classification")
}
\references{
W. Zhang, J. Qi*, P. Wan, H. Wang, D. Xie, X. Wang, and G. Yan, “An Easy-to-Use Airborne LiDAR Data
Filtering Method Based on Cloth Simulation,” Remote Sens., vol. 8, no. 6, p. 501, 2016.
(http://www.mdpi.com/2072-4292/8/6/501/htm)
}
\seealso{
Other lasground: \code{\link{lasground_pmf}},
  \code{\link{lasground}}
}
