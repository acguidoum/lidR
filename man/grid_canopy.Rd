% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_canopy.r, R/grid_canopy_p2r.r,
%   R/grid_canopy_pitfree.r, R/grid_canopy_tin.r
\name{grid_canopy}
\alias{grid_canopy}
\alias{grid_canopy_p2r}
\alias{grid_canopy_pitfree}
\alias{grid_canopy_tin}
\title{Canopy surface model}
\usage{
grid_canopy(las, algorithm, ...)

grid_canopy_p2r(las, res = 2, subcircle = 0)

grid_canopy_pitfree(las, res = 0.5, thresholds = c(0, 2, 5, 10, 15),
  max_edge = c(0, 1), subcircle = 0)

grid_canopy_tin(las, res = 0.5, max_edge = 0, subcircle = 0)
}
\arguments{
\item{las}{An object of class \link[lidR:LAS-class]{LAS} or \link[lidR:LAScatalog-class]{LAScatalog}.}

\item{algorithm}{character. The name of an algorithm. Can be \code{"p2r"},
\code{"tin"} or \code{"pitfree"}. (see details)}

\item{...}{parameters for the algorithms. These depend on the algorithm used (see documentation
of each method).}

\item{res}{numeric. The size of a grid cell in LiDAR data coordinates units.}

\item{subcircle}{numeric. radius of the circles. To obtain fewer empty pixels the algorithm
can replace each return with a circle composed of 8 points (see details).}

\item{thresholds}{numeric. Set of height thresholds accoring to Khosravipour et al. (2014) algorithm
description (see references)}

\item{max_edge}{numeric. Maximum edge-length of a triangle in the Delaunay triangulation.
If a triangle has an edge greater than this value it will be removed. It is used to drive
the pit-free algorithm and to trim dummy interpolation on non-convex areas.
The first number is the value for the classical triangulation (threshold = 0), the second number
is the value for the pit-free algorithm (for thresholds > 0). If \code{max_edge = 0} no trimming
is done (see examples.}
}
\description{
Creates a canopy surface model using several possible algorithm.
}
\details{
\describe{
\item{p2r}{points-to-raster based method: for each pixel of the ouput raster the function attribute
the height of the highest point found.}
\item{tin}{triangulation based method: Delaunay triangulation of first returns with a linear
interpolation within each triangle.}
\item{pitfree}{the pit-free algorithm developed by Khosravipour et al. (2014), which is based on
the computation of a set of classical triangulations at different heights (see references).}
}
\cr The \code{subcircle} tweak replaces each point with 8 points around the original one. This allows
for virtual 'emulation' of the fact that a lidar point is not a point as such, but more
realistically a disc. This tweak densifies the point cloud and the resulting canopy model is
smoother and contains fewer 'pits' and empty pixels.
}
\section{Working with a \code{LAScatalog}}{

In \code{lidR} when the input of a function is a \link[lidR:LAScatalog-class]{LAScatalog} the
functions uses the internal catalog processing engine. The user can modify the engine options using
the \link[lidR:catalog_options_tools]{available options}. A careful read of the engine
\link[lidR:LAScatalog-class]{engine documentation} is recommended to process \code{LAScatalogs}. Each
function should come with a section that doucment the avaible engine options.\cr\cr
\code{LAScatalog} engine supports \code{.lax} files that \strong{significantly} improve the computation
speed of spatial queries using a spatial index. Users should really take advange a \code{.lax} files
but this is not mandatory.
}

\section{Supported processing options}{

Supported processing options for a \code{LAScatalog} in \code{grid_*} functions (in bold). For
more details see the \link[lidR:LAScatalog-class]{LAScatalog engine documentation}:
\itemize{
\item \strong{tiling_size}: How much data are loaded at once. The tiling size may be slightly modified
internally to ensure a strict wall-to-wall continuous output even when tiling size equal to 0 (processing
by file).
\item buffer: This function guarantee a stric wall-to-wall continuous output. The \code{buffer} option
is no considered.
\item \strong{alignment}: Align the processed clusters. The alignment may be slightly modified
internally to ensure a strict wall-to-wall continuous output.
\item \strong{cores}: How many cores are used.
\item \strong{progress}: Displays a progression estimation.
\item \strong{stop_early}: Leave it as it unless you are an advanced user.
\item \strong{output_files}: Return the output in R or write each cluster's output in a file.
\item laz_compression: is not supported because this function will never write \code{las/laz} files
\item \strong{drivers}: Leave it as it unless you are an advanced user.
\item \strong{\emph{select}}: The functions \code{grid_*} usually know for you what should be loaded or not
and this options is not considered. In \link{grid_metric} this option is respected.
\item \strong{filter}: Read only points of interest.
}
}

\examples{
LASfile <- system.file("extdata", "MixedConifer.laz", package="lidR")
las <- readLAS(LASfile)
col <- height.colors(50)

# Points-to-raster algorithm with a resolution of 1 meters
chm <- grid_canopy(las, "p2r", res = 1)
plot(chm, col = col)

# Points-to-raster algorithm with a resolution of 0.5 meter replacing each
# point by a 20 cm radius circle of 8 points
chm <- grid_canopy(las, "p2r", res = 0.5, subcircle = 0.2)
plot(chm, col = col)

# Basic triangulation and rasterization of first returns
chm <- grid_canopy(las, "tin", res = 0.5)
plot(chm, col = col)

# Khosravipour et al. pitfree algorithm
chm <- grid_canopy(las, "pitfree", res = 0.5, thresholds = c(0,2,5,10,15), max_edge = c(0, 1.5))
plot(chm, col = col)

\dontrun{
# Potentially complex concave subset of point cloud
x = c(481340, 481340, 481280, 481300, 481280, 481340)
y = c(3812940, 3813000, 3813000, 3812960, 3812940, 3812940)
las2 = lasclipPolygon(las,x,y)
plot(las2)

# The TIN interpolation being done within the convex hull of the point cloud there are lot of
# dummy pixels that are strictly correct regarding the interpolation method used but meaningless
# in our CHM
chm <- grid_canopy(las2, "tin", res = 0.5)
plot(chm, col = col)

# Use 'max_edge' to trim dummy triangles
chm = grid_canopy(las2, "tin", res = 0.5, max_edge = 3)
plot(chm, col = col)

chm = grid_canopy(las2, "pitfree", res = 0.5, max_edge = c(3, 1.5))
plot(chm, col = col)
}
}
\references{
Khosravipour, A., Skidmore, A. K., Isenburg, M., Wang, T., & Hussin, Y. A. (2014).
Generating pit-free canopy height models from airborne lidar. Photogrammetric Engineering &
Remote Sensing, 80(9), 863-872.
}
