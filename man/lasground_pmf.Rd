% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lasground_pmf.r
\name{lasground_pmf}
\alias{lasground_pmf}
\title{Classify points as ground based on Progressive Morphological Filter}
\usage{
lasground_pmf(las, ws, th, last_returns = TRUE)
}
\arguments{
\item{las}{An object of class \link[lidR:LAS-class]{LAS} or \link[lidR:LAScatalog-class]{LAScatalog}.}

\item{ws}{numeric. Sequence of windows sizes to be used in filtering ground returns.
The values must be positive and in the same units as the point cloud (usually meters, occasionally
feet).}

\item{th}{numeric. Sequence of threshold heights above the parameterized ground surface to be
considered a ground return. The values must be positive and in the same units as the point cloud.}

\item{last_returns}{logical. The algorithm will use only the last returns (including the first returns
in the cases of single return) to run the algorithm. If FALSE all the returns are used. If the fields
\code{'ReturnNumber'} or \code{'NumberOfReturns'} are not specified \code{'last_returns'} is turned
to \code{FALSE} automatically.}
}
\value{
If the input is a \code{LAS} object, returns nothing. The original LAS object is updated by
reference. The 'Classification' column have a value of 2 that denotes 'ground' according to LAS
specifications. If the input is a \code{LAScatalog} returns a \code{LAScatalog}.
}
\description{
Implements algorithms for segmentation of ground points. The function updates the field
\code{Classification} of the LAS input object. The points classified as 'ground' are
assigned a value of 2 according to las specifications (See the ASPRS documentation for the
\href{http://www.asprs.org/a/society/committees/standards/LAS_1_4_r13.pdf}{LAS file format}).
This method is an implementation of the Zhang et al. (2003) algorithm (see reference).
Note that this is not a strict implementation of Zhang et al. This algorithm works at the point
cloud level without any rasterization process. The morphological operator is applied on
the point cloud, not on a raster. Also, Zhang et al. proposed some formulas (eq. 4, 5 and 7)
to compute the sequence of windows sizes and thresholds. Here, these parameters are free
and specified by the user. The function \link{util_makeZhangParam} enables computation
of the parameters according to the original paper.
}
\section{Working with a \code{LAScatalog}}{

In \code{lidR} when the input of a function is a \link[lidR:LAScatalog-class]{LAScatalog} the
functions uses the internal catalog processing engine. The user can modify the engine options using
the \link[lidR:catalog_options_tools]{available options}. A careful read of the engine
\link[lidR:LAScatalog-class]{engine documentation} is recommended to process \code{LAScatalogs}. Each
function should come with a section that doucment the avaible engine options.\cr\cr
\code{LAScatalog} engine supports \code{.lax} files that \strong{significantly} improve the computation
speed of spatial queries using a spatial index. Users should really take advange a \code{.lax} files
but this is not mandatory.
}

\section{Supported processing options}{

Supported processing options for a \code{LAScatalog} (in bold). For more details see the
\link[lidR:LAScatalog-class]{LAScatalog engine documentation}:
\itemize{
\item \strong{tiling_size}: How many data are loaded at once.
\item \strong{buffer*}: Mandatory to get a continuous output without edge effect. The buffer is
always removed once processed and will never be returned neither in R nor in files.
\item \strong{alignment}: Align the processed clusters
\item \strong{cores}: How many cores are used.
\item \strong{progress}: Displays a progression estimation.
\item \strong{stop_early}: Leave it as it unless you are an advanced user.
\item \strong{output_files*}: Mandatory because the output is likely to be too big to be returned
 in R and needs to be written in las/laz files. Supported templates are \code{XLEFT}, \code{XRIGHT},
\code{YBOTTOM}, \code{YTOP}, \code{XCENTER}, \code{YCENTER} \code{ID} and, if tiling size equal to 0
(processing by file), \code{ORIGINALFILENAME}.
\item \strong{laz_compression}: write \code{las} or \code{laz} files
\item \strong{drivers}: Leave it as it unless you are an advanced user.
\item select: The function will write file equivalent to the original ones. Thus \code{select = "*"}
and cannot be changed.
\item \strong{filter}: Read only points of interest.
}
}

\examples{
LASfile <- system.file("extdata", "Topography.laz", package="lidR")
las = readLAS(LASfile, select = "xyzRN")

ws = seq(3,12, 3)
th = seq(0.1, 1.5, length.out = length(ws))

lasground(las, "pmf", ws, th)

plot(las, color = "Classification")
}
\references{
Zhang, K., Chen, S. C., Whitman, D., Shyu, M. L., Yan, J., & Zhang, C. (2003). A progressive
morphological filter for removing nonground measurements from airborne LIDAR data. IEEE
Transactions on Geoscience and Remote Sensing, 41(4 PART I), 872â€“882. http:#doi.org/10.1109/TGRS.2003.810682.
}
\seealso{
Other lasground: \code{\link{lasground_csf}},
  \code{\link{lasground}}
}
