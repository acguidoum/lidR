% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lasclip.r
\name{lasclip}
\alias{lasclip}
\alias{lasclipRectangle}
\alias{lasclipPolygon}
\alias{lasclipCircle}
\title{Clip LiDAR points}
\usage{
lasclip(las, geometry)

lasclipRectangle(las, xleft, ybottom, xright, ytop)

lasclipPolygon(las, xpoly, ypoly)

lasclipCircle(las, xcenter, ycenter, radius)
}
\arguments{
\item{las}{An object of class \code{LAS} or \code{LAScatalog}.}

\item{geometry}{a geometric object. Many types are supported, see section 'supported geometries'.}

\item{xleft}{numeric. left x coordinates of rectangles.}

\item{ybottom}{numeric. bottom y coordinates of rectangles.}

\item{xright}{numeric. right x coordinates of rectangles.}

\item{ytop}{numeric. top y coordinates of rectangles.}

\item{xpoly}{numeric. x coordinates of a polygon.}

\item{ypoly}{numeric. y coordinates of a polygon.}

\item{xcenter}{numeric. x coordinates of discs centers.}

\item{ycenter}{numeric. y coordinates of discs centers.}

\item{radius}{numeric. disc radiuses.}
}
\value{
An object of class \code{LAS} or a \code{list} of \code{LAS} objects if the query implies to return
several regions of interest or \code{NULL} if the query is outside the dataset or within a region that does
not contains any point or a \code{LAScatalog} if the query is immediatly written into file without
loading anything in R..
}
\description{
Clip LiDAR points within a given geometry from a point cloud (\code{LAS} object) or a catalog
(\code{LAScatalog} object). With a \code{LAS} object, the user first reads and loads a point-cloud
in memory and then can clip it to get a subset  within a region of interest (ROI). With a \code{LAScatalog}
object, the user can extracts any arbitrary ROI for a set of \code{las/laz} file loading only the
points of interest. This is faster, easier and much more memory-efficient for extracting ROIs.
}
\section{Supported geometries}{

\itemize{
 \item \href{https://en.wikipedia.org/wiki/Well-known_text}{WKT string}: describing a POLYGON or
 a MULTIPOLYGON.
 \item \link[sp:Polygon-class]{Polygon}
 \item \link[sp:Polygons-class]{Polygons}
 \item \link[sp:SpatialPolygons-class]{SpatialPolygons}
 \item \link[sp:SpatialPolygonsDataFrame-class]{SpatialPolygonsDataFrame}
 \item \link[sf:sf]{SimpleFeature}
 \item \link[raster:Extent-class]{Extent}
 \item \link[base:matrix]{matrix} 2 x 2 describing a bounding box following this order:
 \preformatted{
  min     max
x 684816  684943
y 5017823 5017957}
 \item Any other object that have a bouding box accessible via \code{raster::extent} such as a
 \link[raster:RasterLayer-class]{RasterLayer} or a \code{Spatial*} object. A rectangle is extracted.
 }
}

\section{Working with a \code{LAScatalog}}{

In \code{lidR} when the input is a \link[lidR:LAScatalog-class]{LAScatalog} the functions run following
the catalog processing options. The user can modify the processing options using the
\link[lidR:catalog]{available options}.\cr\cr
\code{lidR} supports .lax files that \strong{significantly} improve the computation speed of
spatial queries using a spatial index. Users should really take advange a .lax files but this is
not mandatory.
}

\section{Supported processing options for a LAScatalog}{

\itemize{
\item \strong{cores}: If several ROIs are requested, they can be extracted in parallel. See \link{LAScatalog-class}.
\item \strong{progress}: See \link{LAScatalog-class}.
\item \strong{stop_early}: See \link{LAScatalog-class}.
\item \strong{output_files}: If 'output_files' is set in the catalog, the ROIs will not be returned in R.
They will be written in one or several files. See \link{LAScatalog-class} and examples. The allowed
templates in \code{lasclip} are \code{{XLEFT}, {XRIGHT}, {YBOTTOM}, {YTOP}, {ID}, {XCENTER},
{YCENTER}} or any names from the table of attributes of geospatial objects given as input such as
\code{{LAKENAME}} or \code{{YEAR}} for example if these fields exist. If empty everything is returned
into R.
\item \strong{laz_compression}: The ouptut files are las or laz. See also \link{LAScatalog-class}.
}
}

\examples{
LASfile <- system.file("extdata", "Megaplot.laz", package="lidR")

# Load the file and clip the region of interest
las = readLAS(LASfile)
subset1 = lasclipRectangle(las, 684850, 5017850, 684900, 5017900)

# Do not load the file(s), extract only the region of interest from a bigger dataset
ctg = catalog(LASfile)
subset2 = lasclipRectangle(ctg, 684850, 5017850, 684900, 5017900)

# Extract all the polygons from a shapefile
shapefile_dir <- system.file("extdata", package = "lidR")
lakes = rgdal::readOGR(shapefile_dir, "lake_polygons_UTM17")
subset3 = lasclip(ctg, lakes)

# Extract the polygons, write them in files name after the lake names, do not load anything in R
set_output_files(ctg) <- paste0(tempfile(), "_{LAKENAME_1}")
lasclip(ctg, lakes)

\dontrun{
plot(subset1)
plot(subset2)
plot(subset3)
}
}
