% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/catalog_retile.r
\name{catalog_retile}
\alias{catalog_retile}
\title{Retile a catalog}
\usage{
catalog_retile(ctg)
}
\arguments{
\item{ctg}{A \link[lidR:catalog]{LAScatalog} object}
}
\value{
A new \code{LAScatalog} object
}
\description{
Splits or merges files to reshape the original catalog files (.las or .laz) into smaller or larger
files. It also enables the addition or removal of a buffer around the tiles. The new files are written
in a dedicated folder. The function first displays the layout of the new tiling pattern and then asks
the user to validate the command.
}
\details{
Internally the function reads and writes the clusters defined by the internal processing options of a
\link[lidR:LAScatalog-class]{LAScatalog} (see also \link{catalog}). Thus the function is flexible and
enables the user to retile the dataset, retile while adding or removing a buffer (negative buffers are
allowed), or optionally to compress the data by retiling without changing the pattern but by changing
the format (las/laz).\cr\cr

Note that this function is not actually very useful since \code{lidR} manages everything
(clipping, processing, buffering, ...) internally using the proper options. Thus, retiling may be useful
for working in other software for example, but not in \code{lidR}.
}
\section{Working with a \code{LAScatalog}}{

In \code{lidR} when the input of a function is a \link[lidR:LAScatalog-class]{LAScatalog} the
functions uses the internal catalog processing engine. The user can modify the engine options using
the \link[lidR:catalog_options_tools]{available options}. A careful read of the engine
\link[lidR:LAScatalog-class]{engine documentation} is recommended to process \code{LAScatalogs}. Each
function should come with a section that doucment the avaible engine options.\cr\cr
\code{LAScatalog} engine supports \code{.lax} files that \strong{significantly} improve the computation
speed of spatial queries using a spatial index. Users should really take advange a \code{.lax} files
but this is not mandatory.
}

\section{Supported processing options}{

Supported processing options for a \code{LAScatalog} (in bold). For more details see the
\link[lidR:LAScatalog-class]{LAScatalog engine documentation}:
\itemize{
\item \strong{tiling_size}: How many data are loaded at once.
\item \strong{buffer}: Load clusters with a buffer
\item \strong{alignment}: Align the processed clusters
\item \strong{cores}: How many cores are used. .
\item \strong{progress}: Displays a progression estimation.
\item \strong{stop_early}: Leave it as it unless you are an advanced user.
\item \strong{output_files}: The user-function outputs will be written in files instead of being
returned into R
\item \strong{laz_compression}: write \code{las} or \code{laz} files (only if the user-defined function)
return a \code{LAS} object.
\item \strong{drivers}: Leave it as it unless you are an advanced user.
\item \strong{select}: Select only the data of interest to save processing memory.
\item \strong{filter}: Read only points of interest.
}
}

\examples{
\dontrun{
ctg = catalog("path/to/catalog")

# Create a new set of .las files 500 by 500 wide in the folder
# path/to/new/catalog/ and iteratively named Forest_1.las, Forest_2.las
# Forest_3.las, and so on.

set_buffer(ctg) <- 0
set_tiling_size(ctg) <- 500
set_output_files(ctg) <- "path/to/new/catalog/Forest_{ID}
newctg = catalog_retile(ctg)

# Create a new set of .las files equivalent to the original one
# but extended with a 50 m buffer in the folder path/to/new/catalog/
# and iteratively named named after the original files.

set_buffer(ctg) <- 50
set_tiling_size(ctg) <- 0
set_output_files(ctg) <- "path/to/new/catalog/{ORIGINALFILENAME}_buffered
newctg = catalog_retile(ctg)

# Being flexible this function can also compress a catalog but this is
# not really useful since laszip from LAStools is a free and open source
# program.

set_buffer(ctg) <- 0
set_tiling_size(ctg) <- 0
set_laz_compression(ctg) <- TRUE
newctg = catalog_retile(ctg)
}
}
\seealso{
\link{catalog}
}
